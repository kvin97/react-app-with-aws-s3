{"version":3,"sources":["UserTable.js","UserActions.js","App.js","serviceWorker.js","index.js"],"names":["UserTable","userDetails","columns","title","dataIndex","key","dataSource","rowKey","UserActions","createUser","deleteUser","setUserDetails","useState","userId","setUserId","name","setName","language","setLanguage","description","setDescription","userIdToDelete","setUserIdToDelete","Fragment","onSubmit","e","type","value","onChange","target","baseUrl","getUser","a","axios","get","response","data","event","preventDefault","delete","createUserDetails","post","App","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3aee986.chunk.js","sourcesContent":["import { Table } from 'antd';\nimport React from 'react';\n\nconst UserTable = ({ userDetails }) => {\n\n  const columns = [\n    {\n      title: 'ID',\n      dataIndex: 'userId',\n      key: 'userId'\n    },\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: 'Language',\n      dataIndex: 'language',\n      key: 'language',\n    },\n    {\n      title: 'Description',\n      dataIndex: 'description',\n      key: 'description',\n    }\n  ];\n\n  return <Table columns={columns} dataSource={userDetails} rowKey=\"userId\"/>;\n};\n\nexport default UserTable;\n\n","import React, { useState } from 'react';\n\nfunction UserActions({createUser, deleteUser, setUserDetails}){\n    const [userId,setUserId] = useState(\"\");\n    const [name,setName] = useState(\"\");\n    const [language,setLanguage] = useState(\"\");\n    const [description,setDescription] = useState(\"\");\n\n    const [userIdToDelete,setUserIdToDelete] = useState(\"\");\n    return(\n        <React.Fragment>\n            <div>\n            <form onSubmit={e => createUser(e, { userId, name, language, description }, setUserDetails)}>\n                <label>\n                    UserId:\n                    <input type=\"text\" name=\"userId\" value={userId} onChange={e => setUserId(e.target.value)} />\n                </label>\n                <label>\n                    Name:\n                    <input type=\"text\" name=\"name\" value={name} onChange={e => setName(e.target.value)} />\n                </label>\n                <label>\n                    Language:\n                    <input type=\"text\" name=\"language\" value={language} onChange={e => setLanguage(e.target.value)} />\n                </label>\n                <label>\n                    Description:\n                    <input type=\"text\" name=\"description\" value={description} onChange={e => setDescription(e.target.value)} />\n                </label>\n                    <input type=\"submit\" value=\"Create\" />\n            </form>\n            </div>\n\n            <div>\n            <form onSubmit={e => deleteUser(e, userIdToDelete, setUserDetails)}>\n                <label>\n                    UserId:\n                    <input type=\"text\" name=\"userId\" value={userIdToDelete} onChange={e => setUserIdToDelete(e.target.value)} />\n                </label>\n                    <input type=\"submit\" value=\"Delete\" />\n            </form>\n            </div>\n        </React.Fragment>\n    )\n\n}\n\nexport default UserActions;","import React, {useEffect, useState} from 'react';\nimport UserTable from './UserTable';\nimport UserActions from './UserActions';\nimport axios from 'axios';\n\nconst baseUrl = 'https://l4e2a4hnej.execute-api.us-east-1.amazonaws.com/dev';\n\nconst getUser = async (setUserDetails) => {\n  const response = await axios.get(`${baseUrl}/Users`);\n  setUserDetails(response.data);\n}\nconst deleteUser = async (event,userId,setUserDetails) => {\n  event.preventDefault();\n  await axios.delete(`${baseUrl}/User/${userId}`);\n  getUser(setUserDetails);\n}\n\nconst createUser = async (event, createUserDetails, setUserDetails) => {\n  event.preventDefault();\n  await axios.post(`${baseUrl}/Users`, createUserDetails);\n  getUser(setUserDetails);\n}\n\nfunction App() {\n  const [userDetails, setUserDetails] = useState([]);\n\n  useEffect(() => {\n    getUser(setUserDetails);\n  }, []);\n\n  return (\n    <div> \n      <h1>User Details Table</h1>\n    <React.Fragment>\n      <UserTable userDetails={userDetails} />\n      <UserActions createUser={createUser} deleteUser={deleteUser} setUserDetails={setUserDetails} />\n    </React.Fragment>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"antd/dist/antd.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}